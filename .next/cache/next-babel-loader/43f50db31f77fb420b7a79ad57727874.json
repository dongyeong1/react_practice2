{"ast":null,"code":"import { applyMiddleware, createStore, compose } from 'redux';\nimport { createWrapper } from 'next-redux-wrapper';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\nimport reducer from '../reducers';\nimport rootSaga from '../sagas';\n\nvar configureStore = function configureStore(context) {\n  var sagaMiddleware = createSagaMiddleware();\n  console.log(context);\n  var middlewares = [sagaMiddleware];\n  var enhancer = false ? compose(applyMiddleware.apply(void 0, middlewares)) : composeWithDevTools(applyMiddleware.apply(void 0, middlewares));\n  var store = createStore(reducer, enhancer);\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  return store;\n};\n\nvar wrapper = createWrapper(configureStore, {\n  debug: true\n});\nexport default wrapper;","map":{"version":3,"sources":["/Users/dong/nodebird/prepare/front/store/configureStore.js"],"names":["applyMiddleware","createStore","compose","createWrapper","composeWithDevTools","createSagaMiddleware","reducer","rootSaga","configureStore","context","sagaMiddleware","console","log","middlewares","enhancer","store","sagaTask","run","wrapper","debug"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,WAA1B,EAAuCC,OAAvC,QAAsD,OAAtD;AACA,SAASC,aAAT,QAA8B,oBAA9B;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AAEA,OAAOC,OAAP,MAAoB,aAApB;AAEA,OAAOC,QAAP,MAAqB,UAArB;;AAEA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,OAAD,EAAa;AAClC,MAAMC,cAAc,GAACL,oBAAoB,EAAzC;AACAM,EAAAA,OAAO,CAACC,GAAR,CAAYH,OAAZ;AACA,MAAMI,WAAW,GAAG,CAACH,cAAD,CAApB;AACA,MAAMI,QAAQ,GAAG,QACbZ,OAAO,CAACF,eAAe,MAAf,SAAmBa,WAAnB,CAAD,CADM,GAEbT,mBAAmB,CACnBJ,eAAe,MAAf,SAAmBa,WAAnB,CADmB,CAFvB;AAMA,MAAME,KAAK,GAAGd,WAAW,CAACK,OAAD,EAAUQ,QAAV,CAAzB;AACAC,EAAAA,KAAK,CAACC,QAAN,GAAeN,cAAc,CAACO,GAAf,CAAmBV,QAAnB,CAAf;AACA,SAAOQ,KAAP;AACD,CAbD;;AAeA,IAAMG,OAAO,GAAGf,aAAa,CAACK,cAAD,EAAiB;AAAEW,EAAAA,KAAK;AAAP,CAAjB,CAA7B;AAEA,eAAeD,OAAf","sourcesContent":["import { applyMiddleware, createStore, compose } from 'redux';\nimport { createWrapper } from 'next-redux-wrapper';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\n\nimport reducer from '../reducers';\n\nimport rootSaga from '../sagas'\n\nconst configureStore = (context) => {\n  const sagaMiddleware=createSagaMiddleware();\n  console.log(context);\n  const middlewares = [sagaMiddleware ];\n  const enhancer = process.env.NODE_ENV === 'production'\n    ? compose(applyMiddleware(...middlewares))\n    : composeWithDevTools(\n      applyMiddleware(...middlewares),\n    );\n      \n  const store = createStore(reducer, enhancer);\n  store.sagaTask=sagaMiddleware.run(rootSaga)\n  return store;\n};\n\nconst wrapper = createWrapper(configureStore, { debug: process.env.NODE_ENV === 'development' });\n\nexport default wrapper;"]},"metadata":{},"sourceType":"module"}