{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(login),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(logout),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogIn),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogOut),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(userSaga);\n\nimport { Result } from 'antd';\nimport { actionChannel, all, delay, fork, put, takeLatest } from 'redux-saga/effects';\n\nfunction logInAPI() {// return axios.post('/api/post')\n}\n\nfunction login(action) {\n  return _regeneratorRuntime.wrap(function login$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            type: 'LOG_IN_SUCCESS',\n            data: action.data\n          });\n\n        case 5:\n          _context.next = 11;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 11;\n          return put({\n            type: 'LOG_IN_FAILURE'\n          });\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n}\n\nfunction logOutAPI() {// return axios.post('/api/post')\n}\n\nfunction logout() {\n  return _regeneratorRuntime.wrap(function logout$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context2.next = 5;\n          return put({\n            type: 'LOG_OUT_SUCCESS'\n          });\n\n        case 5:\n          _context2.next = 11;\n          break;\n\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 11;\n          return put({\n            type: 'LOG_OUT_FAILURE'\n          });\n\n        case 11:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 7]]);\n}\n\nfunction watchLogIn() {\n  return _regeneratorRuntime.wrap(function watchLogIn$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return takeLatest('LOG_IN_REQUEST', login);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nfunction watchLogOut() {\n  return _regeneratorRuntime.wrap(function watchLogOut$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest('LOG_OUT_REQUEST', logout);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(watchLogIn), fork(watchLogOut)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["/Users/dong/nodebird/prepare/front/sagas/user.js"],"names":["login","logout","watchLogIn","watchLogOut","userSaga","Result","actionChannel","all","delay","fork","put","takeLatest","logInAPI","action","type","data","logOutAPI"],"mappings":";;oDAOUA,K;qDAoBAC,M;qDAeAC,U;qDAKAC,W;qDAIeC,Q;;AAnDzB,SAASC,MAAT,QAAuB,MAAvB;AACA,SAASC,aAAT,EAAwBC,GAAxB,EAA6BC,KAA7B,EAAoCC,IAApC,EAA0CC,GAA1C,EAA+CC,UAA/C,QAAgE,oBAAhE;;AAEA,SAASC,QAAT,GAAmB,CACf;AACH;;AAED,SAAUZ,KAAV,CAAgBa,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEQ,iBAAML,KAAK,CAAC,IAAD,CAAX;;AAFR;AAAA;AAGQ,iBAAME,GAAG,CAAC;AACNI,YAAAA,IAAI,EAAC,gBADC;AAENC,YAAAA,IAAI,EAACF,MAAM,CAACE;AAFN,WAAD,CAAT;;AAHR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAQQ,iBAAML,GAAG,CAAC;AACNI,YAAAA,IAAI,EAAC;AADC,WAAD,CAAT;;AARR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBA,SAASE,SAAT,GAAoB,CAChB;AACH;;AAED,SAAUf,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEQ,iBAAMO,KAAK,CAAC,IAAD,CAAX;;AAFR;AAAA;AAGQ,iBAAME,GAAG,CAAC;AACNI,YAAAA,IAAI,EAAC;AADC,WAAD,CAAT;;AAHR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAOQ,iBAAMJ,GAAG,CAAC;AACNI,YAAAA,IAAI,EAAC;AADC,WAAD,CAAT;;AAPR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAeA,SAAUZ,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMS,UAAU,CAAC,gBAAD,EAAkBX,KAAlB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKA,SAAUG,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMQ,UAAU,CAAC,iBAAD,EAAmBV,MAAnB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUG,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMG,GAAG,CAAC,CACNE,IAAI,CAACP,UAAD,CADE,EAENO,IAAI,CAACN,WAAD,CAFE,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { Result } from 'antd';\nimport { actionChannel, all, delay, fork, put, takeLatest} from 'redux-saga/effects'\n\nfunction logInAPI(){\n    // return axios.post('/api/post')\n}\n\nfunction* login(action){\n    try{\n        yield delay(1000);\n        yield put({\n            type:'LOG_IN_SUCCESS',\n            data:action.data\n        })\n    }catch(err){\n        yield put({\n            type:'LOG_IN_FAILURE',\n             \n        })\n    }\n\n}\n\nfunction logOutAPI(){\n    // return axios.post('/api/post')\n}\n\nfunction* logout(){\n    try{\n        yield delay(1000);\n        yield put({\n            type:'LOG_OUT_SUCCESS',\n        })\n    }catch(err){\n        yield put({\n            type:'LOG_OUT_FAILURE',\n             \n        })\n    }\n\n}\n\nfunction* watchLogIn(){\n    yield takeLatest('LOG_IN_REQUEST',login)\n\n}\n\nfunction* watchLogOut(){\n    yield takeLatest('LOG_OUT_REQUEST',logout)\n}\n\nexport default function* userSaga(){\n    yield all([\n        fork(watchLogIn),\n        fork(watchLogOut),\n    ])\n}"]},"metadata":{},"sourceType":"module"}