{"ast":null,"code":"import { all, delay, put, takeLatest, fork, throttle, call } from \"redux-saga/effects\";\nimport axios from 'axios';\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, generateDummyPost, LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\nimport shortid from \"shortid\";\n\nfunction loadPostsAPI(data) {\n  return axios.get('/posts', data);\n}\n\nfunction* loadPosts(action) {\n  try {\n    const result = yield call(loadPostsAPI, action.data);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post('/post', {\n    content: data\n  });\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction* removePost(action) {\n  try {\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n} //3번\n\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data);\n} //2번\n\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data); //4번\n\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n} //1번\n\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchRemvoePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchLoadPosts() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts); //throttle은 5초동안 다른리퀘스트를 한번제와하고 성공안시키지만 요청들이 쏟아졌을때 5초뒤에 딴 요청을 성공시킨다.\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment), fork(watchRemvoePost), fork(watchLoadPosts)]);\n}","map":{"version":3,"sources":["/Users/dong/nodebird/prepare/front/sagas/post.js"],"names":["all","delay","put","takeLatest","fork","throttle","call","axios","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","generateDummyPost","LOAD_POSTS_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","ADD_POST_TO_ME","REMOVE_POST_OF_ME","shortid","loadPostsAPI","data","get","loadPosts","action","result","type","err","console","error","response","addPostAPI","post","content","addPost","id","removePostAPI","removePost","addCommentAPI","postId","addComment","watchAddPost","watchAddComment","watchRemvoePost","watchLoadPosts","postSaga"],"mappings":"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","sourcesContent":["import { all, delay, put, takeLatest,fork ,throttle,call} from \"redux-saga/effects\";\nimport axios from 'axios'\nimport {\n    ADD_COMMENT_FAILURE,\n    ADD_COMMENT_REQUEST,\n    ADD_COMMENT_SUCCESS,\n    ADD_POST_FAILURE,\n    ADD_POST_REQUEST,\n    ADD_POST_SUCCESS,\n    generateDummyPost,\n    LOAD_POSTS_FAILURE,\n    LOAD_POSTS_REQUEST,\n    LOAD_POSTS_SUCCESS,\n    REMOVE_POST_FAILURE,\n    REMOVE_POST_REQUEST,\n    REMOVE_POST_SUCCESS,\n  } from '../reducers/post';\nimport { ADD_POST_TO_ME ,REMOVE_POST_OF_ME} from \"../reducers/user\";\nimport shortid from \"shortid\";\n\nfunction loadPostsAPI(data) {\n    return axios.get('/posts', data);\n  }\n  \n  function* loadPosts(action) {\n    try {\n      const result = yield call(loadPostsAPI, action.data);\n      yield put({\n        type: LOAD_POSTS_SUCCESS,\n        data:result.data\n      });\n    } catch (err) {\n      console.error(err);\n      yield put({\n        type: LOAD_POSTS_FAILURE,\n        data: err.response.data,\n      });\n    }\n  }\n   \n\nfunction addPostAPI(data){\nreturn axios.post('/post',{content:data})\n}\n\nfunction* addPost(action){\n     try{\n      const result=yield call (addPostAPI,action.data)\n\n        yield put({\n            type:ADD_POST_SUCCESS,\n            data:result.data\n           \n        })\n        yield put({\n            type:ADD_POST_TO_ME,\n            data:result.data.id\n        })\n    }catch(err){\n        yield put({\n            type:ADD_POST_FAILURE,\n            data:err.response.data,\n        })\n    }\n}\n\nfunction removePostAPI(data){\n    return axios.post('/api/post',data)\n}\n\nfunction* removePost(action){ \n     \n     try{\n        yield delay(1000)\n        yield put({\n            type:REMOVE_POST_SUCCESS,\n            data:action.data\n        })\n        yield put({\n            type:REMOVE_POST_OF_ME, \n            data:action.data\n        })\n    }catch(err){\n        yield put({\n            type:REMOVE_POST_FAILURE,\n            data:err.response.data,\n        })\n    }\n}\n\n//3번\nfunction addCommentAPI(data) {\n    return axios.post(`/post/${data.postId}/comment`, data);\n  }\n//2번\n  function* addComment(action) {\n    try {\n      const result = yield call(addCommentAPI, action.data);\n     //4번\n      yield put({\n        type: ADD_COMMENT_SUCCESS,\n        data: result.data,\n      });\n    } catch (err) {\n        console.error(err)\n      yield put({\n        type: ADD_COMMENT_FAILURE,\n        data: err.response.data,\n      });\n    }\n  }\n  \n //1번\nfunction* watchAddPost(){\n    yield takeLatest(ADD_POST_REQUEST,addPost)\n}\n\nfunction* watchAddComment(){\n    yield takeLatest(ADD_COMMENT_REQUEST,addComment)\n}\n\nfunction* watchRemvoePost(){\n    yield takeLatest(REMOVE_POST_REQUEST,removePost)\n}\n\nfunction* watchLoadPosts(){\n    yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n    //throttle은 5초동안 다른리퀘스트를 한번제와하고 성공안시키지만 요청들이 쏟아졌을때 5초뒤에 딴 요청을 성공시킨다.\n}\n\n\nexport default function* postSaga(){\n    yield all([\n        fork(watchAddPost),\n        fork(watchAddComment),\n        fork(watchRemvoePost),\n        fork(watchLoadPosts),  \n      ])\n}"]},"metadata":{},"sourceType":"module"}