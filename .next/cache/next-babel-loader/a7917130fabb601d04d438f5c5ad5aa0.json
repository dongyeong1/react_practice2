{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nvar initialState = {\n  user: {\n    isLoggedIn: false,\n    user: null,\n    signUpData: {},\n    loginData: {}\n  },\n  post: {\n    mainPosts: []\n  }\n};\n\nvar login = function login(data) {\n  return {\n    type: 'LOG_IN',\n    data: data\n  };\n}; //action\n//state를 바꾸고싶을때 항상 action을 만들어서 store에서 action을이용해 dispatch를 한다 그러면 그바꾼 데이터가 reducer로 전달된다  \n//그러면 기존state 말고 다음state가 만들어진다\n// const changeNickname={\n//     type:'CHANGE_NICKNAME',\n//     data:'dong'\n// }\n// //action creator 동적으로 데이터받는다 \n// const changeNicknames=(data)=>{\n//     return{\n//         type:'CHANGE_NICKNAME',\n//     }\n// }\n//reducer는 이전상태와 액션을 이용해서 다음상태를 만든다\n\n\nvar rootReducer = function rootReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'LOG_IN':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        user: _objectSpread(_objectSpread({}, state.user), {}, {\n          isLoggedIn: true,\n          user: action.data\n        })\n      });\n  }\n};\n\nexport default rootReducer;","map":{"version":3,"sources":["/Users/dong/nodebird/prepare/front/reducers/index.js"],"names":["initialState","user","isLoggedIn","signUpData","loginData","post","mainPosts","login","data","type","rootReducer","state","action"],"mappings":";;;;;;AAAA,IAAMA,YAAY,GAAC;AAChBC,EAAAA,IAAI,EAAC;AACDC,IAAAA,UAAU,EAAC,KADV;AAEDD,IAAAA,IAAI,EAAC,IAFJ;AAGDE,IAAAA,UAAU,EAAC,EAHV;AAIDC,IAAAA,SAAS,EAAC;AAJT,GADW;AAOhBC,EAAAA,IAAI,EAAC;AACDC,IAAAA,SAAS,EAAC;AADT;AAPW,CAAnB;;AAYA,IAAMC,KAAK,GAAC,SAANA,KAAM,CAACC,IAAD,EAAQ;AAChB,SAAM;AACFC,IAAAA,IAAI,EAAC,QADH;AAEFD,IAAAA,IAAI,EAAJA;AAFE,GAAN;AAIH,CALD,C,CAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;;AACA,IAAME,WAAW,GAAC,SAAZA,WAAY,GAA6B;AAAA,MAA5BC,KAA4B,uEAAtBX,YAAsB;AAAA,MAATY,MAAS;;AAC3C,UAAOA,MAAM,CAACH,IAAd;AACI,SAAK,QAAL;AACI,6CACOE,KADP;AAEIV,QAAAA,IAAI,kCACGU,KAAK,CAACV,IADT;AAEAC,UAAAA,UAAU,EAAC,IAFX;AAGAD,UAAAA,IAAI,EAACW,MAAM,CAACJ;AAHZ;AAFR;AAFR;AAWH,CAZD;;AAaA,eAAeE,WAAf","sourcesContent":["const initialState={\n   user:{\n       isLoggedIn:false,\n       user:null,\n       signUpData:{},\n       loginData:{}\n   },\n   post:{\n       mainPosts:[],\n   }\n} \n \nconst login=(data)=>{\n    return{\n        type:'LOG_IN',\n        data\n    }\n}\n\n//action\n//state를 바꾸고싶을때 항상 action을 만들어서 store에서 action을이용해 dispatch를 한다 그러면 그바꾼 데이터가 reducer로 전달된다  \n//그러면 기존state 말고 다음state가 만들어진다\n// const changeNickname={\n//     type:'CHANGE_NICKNAME',\n//     data:'dong'\n// }\n// //action creator 동적으로 데이터받는다 \n// const changeNicknames=(data)=>{\n//     return{\n//         type:'CHANGE_NICKNAME',\n//     }\n// }\n\n\n//reducer는 이전상태와 액션을 이용해서 다음상태를 만든다\nconst rootReducer=(state=initialState,action)=>{\n    switch(action.type){\n        case 'LOG_IN':\n            return{\n                ...state,\n                user:{\n                    ...state.user,\n                    isLoggedIn:true,\n                    user:action.data\n                },  \n            }\n    }\n}\nexport default rootReducer"]},"metadata":{},"sourceType":"module"}