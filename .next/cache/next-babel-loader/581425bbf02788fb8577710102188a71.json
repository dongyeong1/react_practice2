{"ast":null,"code":"import shortid from \"shortid\";\nimport produce from \"immer\";\nexport const initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: '김동영'\n    },\n    content: '첫 번째 게시글',\n    Images: [{\n      id: shortid.generate(),\n      src: 'https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?udate=20180726'\n    }, {\n      id: shortid.generate(),\n      src: 'https://gimg.gilbut.co.kr/book/BN001958/rn_view_BN001958.jpg'\n    }, {\n      id: shortid.generate(),\n      src: 'https://gimg.gilbut.co.kr/book/BN001998/rn_view_BN001998.jpg'\n    }],\n    Comments: [{\n      id: shortid.generate(),\n      User: {\n        id: shortid.generate(),\n        nickname: 'nero'\n      },\n      content: '우와 개정판이 나왔군요~'\n    }, {\n      id: shortid.generate(),\n      User: {\n        id: shortid.generate(),\n        nickname: 'hero'\n      },\n      content: '얼른 사고싶어요~'\n    }]\n  }],\n  imagePaths: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n};\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\nexport const addPost = data => {\n  return {\n    type: ADD_POST_REQUEST,\n    data\n  };\n};\nexport const addComment = data => {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data\n  };\n};\n\nconst dummyPost = data => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: '황현종'\n  },\n  Images: [],\n  Comments: []\n});\n\nconst dummyComment = data => ({\n  id: shortid.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: '황현종'\n  }\n});\n\nconst reducer = (state = initialState, action) => {\n  return produce(state, draft => {\n    switch (action.type) {\n      case LOAD_POSTS_REQUEST:\n        draft.loadPostsLoading = true;\n        draft.loadPostsDone = false;\n        draft.loadPostsError = null;\n        break;\n\n      case LOAD_POSTS_SUCCESS:\n        draft.loadPostsLoading = false;\n        draft.loadPostsDone = true;\n        draft.mainPosts = action.data.concat(draft.mainPosts);\n        draft.hasMorePosts = draft.mainPosts.length < 50;\n        break;\n\n      case LOAD_POSTS_FAILURE:\n        draft.loadPostsLoading = false;\n        draft.loadPostsError = action.error;\n        break;\n\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(dummyPost(action.data));\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data);\n        break;\n\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n\n      case ADD_COMMENT_SUCCESS:\n        {\n          const post = draft.mainPosts.find(v => v.id === action.data.postId);\n          post.Comments.unshift(dummyComment(action.data.content));\n          draft.addCommentLoading = false;\n          draft.addCommentDone = true;\n          break; // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n          // const post = { ...state.mainPosts[postIndex] };\n          // post.Comments = [dummyComment(action.data.content), ...post.Comments];\n          // const mainPosts = [...state.mainPosts];\n          // mainPosts[postIndex] = post;\n          // return {\n          //   ...state,\n          //   mainPosts,\n          //   addCommentLoading: false,\n          //   addCommentDone: true,\n          // };\n        }\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n\n      default:\n        break;\n    }\n  });\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/dong/nodebird/prepare/front/reducers/post.js"],"names":["shortid","produce","initialState","mainPosts","id","User","nickname","content","Images","generate","src","Comments","imagePaths","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","addPost","data","type","addComment","dummyPost","dummyComment","reducer","state","action","draft","loadPostsLoading","loadPostsDone","loadPostsError","concat","hasMorePosts","length","error","unshift","filter","v","post","find","postId"],"mappings":"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","sourcesContent":["import shortid from \"shortid\";\nimport produce  from \"immer\";\n\nexport const initialState={\n    mainPosts: [{\n        id: 1,\n        User: {\n          id: 1,\n          nickname: '김동영',\n        },\n        content: '첫 번째 게시글',\n        Images: [{\n          id:shortid.generate(), \n\n          src: 'https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?udate=20180726',\n        }, {\n          id:shortid.generate(), \n\n\n          src: 'https://gimg.gilbut.co.kr/book/BN001958/rn_view_BN001958.jpg',\n        }, {\n          id:shortid.generate(), \n\n          src: 'https://gimg.gilbut.co.kr/book/BN001998/rn_view_BN001998.jpg',\n        }],\n        Comments: [{\n          id:shortid.generate(), \n          User: {\n            id:shortid.generate(), \n\n            nickname: 'nero',\n          },\n          content: '우와 개정판이 나왔군요~',\n        }, {\n          id:shortid.generate(), \n\n          User: {\n            id:shortid.generate(), \n \n            nickname: 'hero',\n          },\n          content: '얼른 사고싶어요~',\n        }]\n      }],\n      imagePaths: [],\n      addPostLoading:false,\n      addPostDone:false,\n      addPostError:null,\n      removePostLoading:false,\n      removePostDone:false,\n      removePostError:null,\n      addCommentLoading:false,\n      addCommentDone:false,\n      addCommentError:null,\n    }\n\nexport const ADD_POST_REQUEST ='ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS ='ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE ='ADD_POST_FAILURE';\n\nexport const REMOVE_POST_REQUEST ='REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS ='REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE ='REMOVE_POST_FAILURE';\n\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\n\n\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\n\n\nexport const addPost=(data)=>{\n   return{\n    type :ADD_POST_REQUEST,\n    data\n   }\n}\n\nexport const addComment=(data)=>{\n  return{\n   type :ADD_COMMENT_REQUEST,\n   data\n  }\n}\n\n\nconst dummyPost =(data)=>( \n  \n  {\n  \n    id: data.id,\n    content: data.content ,\n    User: {\n      id: 1,\n      nickname: '황현종',\n    },\n    Images: [],\n    Comments: [],\n  });\n\nconst dummyComment=(data)=>({\n  id: shortid.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: '황현종',\n  },\n  \n})\n  \n\n\n\nconst reducer=(state=initialState,action)=>{\n  return produce(state,(draft)=>{\n    switch (action.type) {\n      case LOAD_POSTS_REQUEST:\n        draft.loadPostsLoading = true;\n        draft.loadPostsDone = false;\n        draft.loadPostsError = null;\n        break;\n      case LOAD_POSTS_SUCCESS:\n        draft.loadPostsLoading = false;\n        draft.loadPostsDone = true;\n        draft.mainPosts = action.data.concat(draft.mainPosts);\n        draft.hasMorePosts = draft.mainPosts.length < 50;\n        break;\n      case LOAD_POSTS_FAILURE:\n        draft.loadPostsLoading = false;\n        draft.loadPostsError = action.error;\n        break;\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(dummyPost(action.data));\n        break;\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n      case REMOVE_POST_SUCCESS:\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data);\n        break;\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n      case ADD_COMMENT_SUCCESS: {\n        const post = draft.mainPosts.find((v) => v.id === action.data.postId);\n        post.Comments.unshift(dummyComment(action.data.content));\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        break;\n        // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n        // const post = { ...state.mainPosts[postIndex] };\n        // post.Comments = [dummyComment(action.data.content), ...post.Comments];\n        // const mainPosts = [...state.mainPosts];\n        // mainPosts[postIndex] = post;\n        // return {\n        //   ...state,\n        //   mainPosts,\n        //   addCommentLoading: false,\n        //   addCommentDone: true,\n        // };\n      }\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n      default:\n        break;\n    }\n\n  });\n   \n}\n\nexport default reducer"]},"metadata":{},"sourceType":"module"}