{"ast":null,"code":"import { all, delay, put, takeLatest, fork } from \"redux-saga/effects\";\nimport axios from 'axios';\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, generateDummyPost, LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS } from '../reducers/post';\nimport { ADD_POST_TO_ME } from \"../reducers/user\";\nimport shortid from \"shortid\";\n\nfunction addPostAPI() {// return axios.post('/api/post',data)\n}\n\nfunction* addPost(action) {\n  const id = shortid.generate();\n\n  try {\n    yield delay(1000);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n} //3번\n\n\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n} //2번\n\n\nfunction* addComment(action) {\n  try {\n    // const result = yield call(addCommentAPI, action.data);\n    yield delay(1000); //4번\n\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n} //1번\n\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment)]);\n}","map":{"version":3,"sources":["/Users/dong/nodebird/prepare/front/sagas/post.js"],"names":["all","delay","put","takeLatest","fork","axios","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","generateDummyPost","LOAD_POSTS_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","ADD_POST_TO_ME","shortid","addPostAPI","addPost","action","id","generate","type","data","content","err","response","addCommentAPI","post","postId","addComment","watchAddPost","watchAddComment","postSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,KAAd,EAAqBC,GAArB,EAA0BC,UAA1B,EAAqCC,IAArC,QAAiD,oBAAjD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACIC,mBADJ,EAEIC,mBAFJ,EAGIC,mBAHJ,EAIIC,gBAJJ,EAKIC,gBALJ,EAMIC,gBANJ,EAOIC,iBAPJ,EAQIC,kBARJ,EASIC,kBATJ,EAUIC,kBAVJ,EAWIC,mBAXJ,EAYIC,mBAZJ,EAaIC,mBAbJ,QAcS,kBAdT;AAeA,SAASC,cAAT,QAA+B,kBAA/B;AACA,OAAOC,OAAP,MAAoB,SAApB;;AAEA,SAASC,UAAT,GAAqB,CACjB;AACH;;AAED,UAAUC,OAAV,CAAkBC,MAAlB,EAAyB;AACrB,QAAMC,EAAE,GAACJ,OAAO,CAACK,QAAR,EAAT;;AACA,MAAG;AACC,UAAMxB,KAAK,CAAC,IAAD,CAAX;AACA,UAAMC,GAAG,CAAC;AACNwB,MAAAA,IAAI,EAACf,gBADC;AAENgB,MAAAA,IAAI,EAAC;AACDH,QAAAA,EADC;AAEDI,QAAAA,OAAO,EAACL,MAAM,CAACI;AAFd;AAFC,KAAD,CAAT;AAOA,UAAMzB,GAAG,CAAC;AACNwB,MAAAA,IAAI,EAACP,cADC;AAENQ,MAAAA,IAAI,EAACH;AAFC,KAAD,CAAT;AAIH,GAbD,CAaC,OAAMK,GAAN,EAAU;AACP,UAAM3B,GAAG,CAAC;AACNwB,MAAAA,IAAI,EAACjB,gBADC;AAENkB,MAAAA,IAAI,EAACE,GAAG,CAACC,QAAJ,CAAaH;AAFZ,KAAD,CAAT;AAIH;AACJ,C,CAED;;;AACA,SAASI,aAAT,CAAuBJ,IAAvB,EAA6B;AACzB,SAAOtB,KAAK,CAAC2B,IAAN,CAAY,aAAYL,IAAI,CAACM,MAAO,UAApC,EAA+CN,IAA/C,CAAP;AACD,C,CACH;;;AACE,UAAUO,UAAV,CAAqBX,MAArB,EAA6B;AAC3B,MAAI;AACF;AACA,UAAMtB,KAAK,CAAC,IAAD,CAAX,CAFE,CAGH;;AACC,UAAMC,GAAG,CAAC;AACRwB,MAAAA,IAAI,EAAElB,mBADE;AAERmB,MAAAA,IAAI,EAAEJ,MAAM,CAACI;AAFL,KAAD,CAAT;AAID,GARD,CAQE,OAAOE,GAAP,EAAY;AACZ,UAAM3B,GAAG,CAAC;AACRwB,MAAAA,IAAI,EAAEpB,mBADE;AAERqB,MAAAA,IAAI,EAAEE,GAAG,CAACC,QAAJ,CAAaH;AAFX,KAAD,CAAT;AAID;AACF,C,CAEF;;;AACD,UAAUQ,YAAV,GAAwB;AACpB,QAAMhC,UAAU,CAACO,gBAAD,EAAkBY,OAAlB,CAAhB;AACH;;AACD,UAAUc,eAAV,GAA2B;AACvB,QAAMjC,UAAU,CAACI,mBAAD,EAAqB2B,UAArB,CAAhB;AACH;;AAED,eAAe,UAAUG,QAAV,GAAoB;AAC/B,QAAMrC,GAAG,CAAC,CACNI,IAAI,CAAC+B,YAAD,CADE,EAEN/B,IAAI,CAACgC,eAAD,CAFE,CAAD,CAAT;AAIH","sourcesContent":["import { all, delay, put, takeLatest,fork } from \"redux-saga/effects\";\nimport axios from 'axios'\nimport {\n    ADD_COMMENT_FAILURE,\n    ADD_COMMENT_REQUEST,\n    ADD_COMMENT_SUCCESS,\n    ADD_POST_FAILURE,\n    ADD_POST_REQUEST,\n    ADD_POST_SUCCESS,\n    generateDummyPost,\n    LOAD_POSTS_FAILURE,\n    LOAD_POSTS_REQUEST,\n    LOAD_POSTS_SUCCESS,\n    REMOVE_POST_FAILURE,\n    REMOVE_POST_REQUEST,\n    REMOVE_POST_SUCCESS,\n  } from '../reducers/post';\nimport { ADD_POST_TO_ME } from \"../reducers/user\";\nimport shortid from \"shortid\";\n\nfunction addPostAPI(){\n    // return axios.post('/api/post',data)\n}\n\nfunction* addPost(action){\n    const id=shortid.generate();\n    try{\n        yield delay(1000)\n        yield put({\n            type:ADD_POST_SUCCESS,\n            data:{\n                id,\n                content:action.data\n            }\n        })\n        yield put({\n            type:ADD_POST_TO_ME,\n            data:id\n        })\n    }catch(err){\n        yield put({\n            type:ADD_POST_FAILURE,\n            data:err.response.data,\n        })\n    }\n}\n\n//3번\nfunction addCommentAPI(data) {\n    return axios.post(`/api/post/${data.postId}/comment`, data);\n  }\n//2번\n  function* addComment(action) {\n    try {\n      // const result = yield call(addCommentAPI, action.data);\n      yield delay(1000);\n     //4번\n      yield put({\n        type: ADD_COMMENT_SUCCESS,\n        data: action.data,\n      });\n    } catch (err) {\n      yield put({\n        type: ADD_COMMENT_FAILURE,\n        data: err.response.data,\n      });\n    }\n  }\n  \n //1번\nfunction* watchAddPost(){\n    yield takeLatest(ADD_POST_REQUEST,addPost)\n}\nfunction* watchAddComment(){\n    yield takeLatest(ADD_COMMENT_REQUEST,addComment)\n}\n\nexport default function* postSaga(){\n    yield all([\n        fork(watchAddPost),\n        fork(watchAddComment),\n    ])\n}"]},"metadata":{},"sourceType":"module"}