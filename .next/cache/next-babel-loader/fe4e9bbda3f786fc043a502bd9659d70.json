{"ast":null,"code":"var _jsxFileName = \"/Users/dong/nodebird/prepare/front/component/PostCard.js\";\nvar __jsx = React.createElement;\nimport React, { useCallback, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Card, Button, Avatar, Popover, List, Comment } from 'antd';\nimport { RetweetOutlined, HeartTwoTone, HeartOutlined, MessageOutlined, EllipsisOutlined } from '@ant-design/icons'; // import PostImages from './PostImages';\n\nimport CommentForm from './CommentForm';\nimport { REMOVE_POST_REQUEST, LIKE_POST_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, UNLIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS } from '../reducers/post';\nimport FollowButton from './FollowButton';\n\nconst PostCard = ({\n  post\n}) => {\n  const id = useSelector(state => state.user.me && state.user.me.id);\n  const liked = post.Likers.find(v => v.id === id);\n  const {\n    removePostLoading\n  } = useSelector(state => state.post);\n  const dispatch = useDispatch(); // const[liked,setLiked]=useState(false);\n\n  const {\n    0: commentFormOpened,\n    1: setCommentFromOpened\n  } = useState(false);\n  const onLike = useCallback(() => {\n    dispatch({\n      type: LIKE_POST_REQUEST,\n      data: post.id\n    });\n  }, []);\n  const onUnLike = useCallback(() => {\n    dispatch({\n      type: UNLIKE_POST_REQUEST,\n      data: post.id\n    });\n  }, []);\n  const onToggleComment = useCallback(() => {\n    setCommentFromOpened(prev => !prev);\n  }, []);\n  const onRemovePost = useCallback(() => {\n    console.log('asdasd');\n    dispatch({\n      type: REMOVE_POST_REQUEST,\n      data: post.id\n    });\n  }, []);\n  return __jsx(\"div\", {\n    style: {\n      marginBottom: 10\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }\n  }, __jsx(Card // cover={post.Images[0] && <PostImages images={post.Images} />}\n  , {\n    actions: [__jsx(RetweetOutlined, {\n      key: \"retweet\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }\n    }), liked ? __jsx(HeartTwoTone, {\n      twoToneColor: \"#eb2f96\",\n      key: \"heart\",\n      onClick: onUnLike,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 15\n      }\n    }) : __jsx(HeartOutlined, {\n      key: \"heart\",\n      onClick: onLike,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 85\n      }\n    }), __jsx(MessageOutlined, {\n      key: \"message\",\n      onClick: onToggleComment,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }\n    }), //popover는 ...에 마우스올렸을때 더보기뜨는것\n    __jsx(Popover, {\n      key: \"ellipsis\",\n      content: __jsx(Button.Group, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 13\n        }\n      }, id && post.User.id === id ? __jsx(React.Fragment, null, __jsx(Button, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 21\n        }\n      }, \"\\uC218\\uC815\"), __jsx(Button, {\n        type: \"danger\",\n        loading: removePostLoading,\n        onClick: onRemovePost,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 21\n        }\n      }, \"\\uC0AD\\uC81C\")) : __jsx(Button, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 19\n        }\n      }, \"\\uC2E0\\uACE0\")),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }\n    }, __jsx(EllipsisOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }\n    }))],\n    extra: id && __jsx(FollowButton, {\n      post: post,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 19\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }, __jsx(Card.Meta, {\n    avatar: __jsx(Avatar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 19\n      }\n    }, post.User.nickname[0]),\n    title: post.User.nickname,\n    description: post.content,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 11\n    }\n  })), commentFormOpened && __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 15\n    }\n  }, __jsx(CommentForm, {\n    post: post,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 19\n    }\n  }), __jsx(List, {\n    header: `${post.Comments.length}개의 댓글 `,\n    itemLayout: \"horizontal\",\n    dataSource: post.Comments //item은 post.Comments안에있는 요소하나하나\n    ,\n    renderItem: item => __jsx(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 26\n      }\n    }, __jsx(Comment, {\n      author: item.User.nickname,\n      avatar: __jsx(Avatar, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 38\n        }\n      }, item.User.nickname[0]),\n      content: item.content,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 30\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 19\n    }\n  })));\n};\n\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    id: PropTypes.number,\n    User: PropTypes.object,\n    content: PropTypes.string,\n    createdAt: PropTypes.string,\n    Comments: PropTypes.arrayOf(PropTypes.object),\n    Images: PropTypes.arrayOf(PropTypes.object),\n    Likers: PropTypes.arrayOf(PropTypes.object)\n  }).isRequired\n};\nexport default PostCard;","map":{"version":3,"sources":["/Users/dong/nodebird/prepare/front/component/PostCard.js"],"names":["React","useCallback","useState","PropTypes","useDispatch","useSelector","Card","Button","Avatar","Popover","List","Comment","RetweetOutlined","HeartTwoTone","HeartOutlined","MessageOutlined","EllipsisOutlined","CommentForm","REMOVE_POST_REQUEST","LIKE_POST_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","FollowButton","PostCard","post","id","state","user","me","liked","Likers","find","v","removePostLoading","dispatch","commentFormOpened","setCommentFromOpened","onLike","type","data","onUnLike","onToggleComment","prev","onRemovePost","console","log","marginBottom","User","nickname","content","Comments","length","item","propTypes","shape","number","object","string","createdAt","arrayOf","Images","isRequired"],"mappings":"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","sourcesContent":["import React,{useCallback, useState} from 'react';\nimport PropTypes from 'prop-types'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Card, Button, Avatar, Popover,List,Comment} from 'antd';\nimport { RetweetOutlined, HeartTwoTone, HeartOutlined, MessageOutlined, EllipsisOutlined } from '@ant-design/icons';\n// import PostImages from './PostImages';\nimport CommentForm from './CommentForm';\nimport { REMOVE_POST_REQUEST ,LIKE_POST_FAILURE,\n  LIKE_POST_REQUEST, LIKE_POST_SUCCESS,\n  UNLIKE_POST_FAILURE,\n  UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS,} from '../reducers/post';\nimport FollowButton from './FollowButton'\n\nconst PostCard=({post})=> {\n    const id =useSelector((state)=>state.user.me && state.user.me.id)\n    const liked=post.Likers.find((v)=>v.id===id)\n\n    const {removePostLoading}=useSelector((state)=>state.post)\n\n    const dispatch=useDispatch();\n\n    // const[liked,setLiked]=useState(false);\n    const [commentFormOpened,setCommentFromOpened]=useState(false)\n\n    const onLike=useCallback(()=>{\n        dispatch({\n          type:LIKE_POST_REQUEST,\n          data:post.id\n        })\n    },[])\n\n    const onUnLike=useCallback(()=>{\n      dispatch({\n        type:UNLIKE_POST_REQUEST,\n        data:post.id\n      })\n    },[])\n\n    const onToggleComment =useCallback(()=>{\n        setCommentFromOpened((prev)=>!prev)\n    },[])\n    \n    const onRemovePost=useCallback(()=>{\n      console.log('asdasd')\n       dispatch({\n         type:REMOVE_POST_REQUEST,\n         data:post.id, \n       })\n    },[] )\n  return (\n    <div style={{marginBottom:10}}>\n      <Card\n      // cover={post.Images[0] && <PostImages images={post.Images} />}\n      \n      actions={[\n        <RetweetOutlined key=\"retweet\" />,\n        liked?<HeartTwoTone twoToneColor=\"#eb2f96\" key=\"heart\" onClick={onUnLike}/>:<HeartOutlined key=\"heart\" onClick={onLike} />,\n        <MessageOutlined key=\"message\"  onClick={onToggleComment} />,\n        //popover는 ...에 마우스올렸을때 더보기뜨는것\n        <Popover\n          key=\"ellipsis\"\n          content={(\n            <Button.Group>\n              {id && post.User.id === id\n                ? (\n                  <>\n                    <Button>수정</Button>\n                    <Button type=\"danger\" loading={removePostLoading} onClick={onRemovePost}>삭제</Button>\n                  </>\n                )\n                : <Button>신고</Button>}\n            </Button.Group>\n          )}\n        >\n          <EllipsisOutlined />\n        </Popover>,\n      ]}\n      extra={id &&<FollowButton post={post} />}\n      >\n          <Card.Meta\n          avatar={<Avatar>{post.User.nickname[0]}</Avatar>}\n          title={post.User.nickname}\n          description={post.content}\n          />\n          </Card>\n          {commentFormOpened && (\n              <div>\n                  <CommentForm post={post} />\n                  <List\n                     header={`${post.Comments.length}개의 댓글 `}\n                     itemLayout='horizontal'\n                     dataSource={post.Comments}\n                     //item은 post.Comments안에있는 요소하나하나\n                     renderItem={(item)=>(\n                         <li>\n                             <Comment \n                             author={item.User.nickname}\n                             avatar={<Avatar>{item.User.nickname[0]}</Avatar>}\n                             content={item.content}\n                              />\n\n                             \n                         </li>\n                     )}\n                  />\n              </div>\n          )}\n        {/* <Image /> */}\n        {/* <Content /> */}\n        {/* <Buttons />  */}\n      \n        {/* <CommentForm/> */}\n        {/* <Comment/> */}\n    </div>\n  )\n}\n\nPostCard.propTypes = {\n    post: PropTypes.shape({\n      id: PropTypes.number,\n      User: PropTypes.object,\n      content: PropTypes.string,\n      createdAt: PropTypes.string,\n      Comments: PropTypes.arrayOf(PropTypes.object),\n      Images: PropTypes.arrayOf(PropTypes.object),\n      Likers:PropTypes.arrayOf(PropTypes.object)\n    }).isRequired,\n  };\n\nexport default PostCard;\n"]},"metadata":{},"sourceType":"module"}