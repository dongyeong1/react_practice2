{"ast":null,"code":"import { all, delay, put, takeLatest, fork, throttle, call } from \"redux-saga/effects\";\nimport axios from 'axios';\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, generateDummyPost, LIKE_POST_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, UNLIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\nimport shortid from \"shortid\";\n\nfunction likePostAPI(data) {\n  return axios.patch(`/post/${data}/like`);\n}\n\nfunction* likePost(action) {\n  try {\n    const result = yield call(likePostAPI, action.data);\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LIKE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction unlikePostAPI(data) {\n  return axios.delete(`/post/${data}/like`);\n}\n\nfunction* unlikePost(action) {\n  try {\n    const result = yield call(unlikePostAPI, action.data);\n    yield put({\n      type: UNLIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: UNLIKE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction loadPostsAPI(data) {\n  return axios.get('/posts', data);\n}\n\nfunction* loadPosts(action) {\n  try {\n    const result = yield call(loadPostsAPI, action.data);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post('/post', {\n    content: data\n  });\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction* removePost(action) {\n  try {\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n} //3번\n\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data);\n} //2번\n\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data); //4번\n\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n} //1번\n\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchRemvoePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchLoadPosts() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts); //throttle은 5초동안 다른리퀘스트를 한번제와하고 성공안시키지만 요청들이 쏟아졌을때 5초뒤에 딴 요청을 성공시킨다.\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\n\nfunction* watchUnlikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchLikePost), fork(watchUnlikePost), fork(watchAddPost), fork(watchAddComment), fork(watchRemvoePost), fork(watchLoadPosts)]);\n}","map":{"version":3,"sources":["/Users/dong/nodebird/prepare/front/sagas/post.js"],"names":["all","delay","put","takeLatest","fork","throttle","call","axios","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","generateDummyPost","LIKE_POST_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","LOAD_POSTS_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","ADD_POST_TO_ME","REMOVE_POST_OF_ME","shortid","likePostAPI","data","patch","likePost","action","result","type","err","console","error","response","unlikePostAPI","delete","unlikePost","loadPostsAPI","get","loadPosts","addPostAPI","post","content","addPost","id","removePostAPI","removePost","addCommentAPI","postId","addComment","watchAddPost","watchAddComment","watchRemvoePost","watchLoadPosts","watchLikePost","watchUnlikePost","postSaga"],"mappings":"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","sourcesContent":["import { all, delay, put, takeLatest,fork ,throttle,call} from \"redux-saga/effects\";\nimport axios from 'axios'\nimport {\n    ADD_COMMENT_FAILURE,\n    ADD_COMMENT_REQUEST,\n    ADD_COMMENT_SUCCESS,\n    ADD_POST_FAILURE,\n    ADD_POST_REQUEST,\n    ADD_POST_SUCCESS,\n    generateDummyPost,\n    LIKE_POST_FAILURE,\n  LIKE_POST_REQUEST, LIKE_POST_SUCCESS,\n  UNLIKE_POST_FAILURE,\n  UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS,\n    LOAD_POSTS_FAILURE,\n    LOAD_POSTS_REQUEST,\n    LOAD_POSTS_SUCCESS,\n    REMOVE_POST_FAILURE,\n    REMOVE_POST_REQUEST,\n    REMOVE_POST_SUCCESS,\n  } from '../reducers/post';\nimport { ADD_POST_TO_ME ,REMOVE_POST_OF_ME} from \"../reducers/user\";\nimport shortid from \"shortid\";\n\n\nfunction likePostAPI(data) {\n  return axios.patch(`/post/${data}/like`);\n}\n\nfunction* likePost(action) {\n  try {\n    const result = yield call(likePostAPI, action.data);\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LIKE_POST_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction unlikePostAPI(data) {\n  return axios.delete(`/post/${data}/like`);\n}\n\nfunction* unlikePost(action) {\n  try {\n    const result = yield call(unlikePostAPI, action.data);\n    yield put({\n      type: UNLIKE_POST_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: UNLIKE_POST_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction loadPostsAPI(data) {\n    return axios.get('/posts', data);\n  }\n  \n  function* loadPosts(action) {\n    try {\n      const result = yield call(loadPostsAPI, action.data);\n      yield put({\n        type: LOAD_POSTS_SUCCESS,\n        data:result.data\n      });\n    } catch (err) {\n      console.error(err);\n      yield put({\n        type: LOAD_POSTS_FAILURE,\n        data: err.response.data,\n      });\n    }\n  }\n   \n\nfunction addPostAPI(data){\nreturn axios.post('/post',{content:data})\n}\n\nfunction* addPost(action){\n     try{\n      const result=yield call (addPostAPI,action.data)\n\n        yield put({\n            type:ADD_POST_SUCCESS,\n            data:result.data\n           \n        })\n        yield put({\n            type:ADD_POST_TO_ME,\n            data:result.data.id\n        })\n    }catch(err){\n        yield put({\n            type:ADD_POST_FAILURE,\n            data:err.response.data,\n        })\n    }\n}\n\nfunction removePostAPI(data){\n    return axios.post('/api/post',data)\n}\n\nfunction* removePost(action){ \n     \n     try{\n        yield delay(1000)\n        yield put({\n            type:REMOVE_POST_SUCCESS,\n            data:action.data\n        })\n        yield put({\n            type:REMOVE_POST_OF_ME, \n            data:action.data\n        })\n    }catch(err){\n        yield put({\n            type:REMOVE_POST_FAILURE,\n            data:err.response.data,\n        })\n    }\n}\n\n//3번\nfunction addCommentAPI(data) {\n    return axios.post(`/post/${data.postId}/comment`, data);\n  }\n//2번\n  function* addComment(action) {\n    try {\n      const result = yield call(addCommentAPI, action.data);\n     //4번\n      yield put({\n        type: ADD_COMMENT_SUCCESS,\n        data: result.data,\n      });\n    } catch (err) {\n        console.error(err)\n      yield put({\n        type: ADD_COMMENT_FAILURE,\n        data: err.response.data,\n      });\n    }\n  }\n  \n //1번\nfunction* watchAddPost(){\n    yield takeLatest(ADD_POST_REQUEST,addPost)\n}\n\nfunction* watchAddComment(){\n    yield takeLatest(ADD_COMMENT_REQUEST,addComment)\n}\n\nfunction* watchRemvoePost(){\n    yield takeLatest(REMOVE_POST_REQUEST,removePost)\n}\n\nfunction* watchLoadPosts(){\n    yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n    //throttle은 5초동안 다른리퀘스트를 한번제와하고 성공안시키지만 요청들이 쏟아졌을때 5초뒤에 딴 요청을 성공시킨다.\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\n\nfunction* watchUnlikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\n\n\nexport default function* postSaga(){\n    yield all([\n      fork(watchLikePost),\n      fork(watchUnlikePost),\n        fork(watchAddPost),\n        fork(watchAddComment),\n        fork(watchRemvoePost),\n        fork(watchLoadPosts),  \n      ])\n}"]},"metadata":{},"sourceType":"module"}