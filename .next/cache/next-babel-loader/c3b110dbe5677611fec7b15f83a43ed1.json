{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { HYDRATE } from 'next-redux-wrapper';\nconst initialState = {\n  user: {\n    isLoggedIn: false,\n    user: null,\n    signUpData: {},\n    loginData: {}\n  },\n  post: {\n    mainPosts: []\n  }\n};\nexport const loginAction = data => {\n  return {\n    type: 'LOG_IN',\n    data\n  };\n};\nexport const logoutAction = data => {\n  return {\n    type: 'LOG_OUT',\n    data\n  };\n}; //action\n//state를 바꾸고싶을때 항상 action을 만들어서 store에서 action을이용해 dispatch를 한다 그러면 그바꾼 데이터가 reducer로 전달된다  \n//그러면 기존state 말고 다음state가 만들어진다\n// const changeNickname={\n//     type:'CHANGE_NICKNAME',\n//     data:'dong'\n// }\n// //action creator 동적으로 데이터받는다 \n// const changeNicknames=(data)=>{\n//     return{\n//         type:'CHANGE_NICKNAME',\n//     }\n// }\n//reducer는 이전상태와 액션을 이용해서 다음상태를 만든다\n\nconst rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'LOG_IN':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        user: _objectSpread(_objectSpread({}, state.user), {}, {\n          isLoggedIn: true,\n          user: action.data\n        })\n      });\n\n    case 'LOG_OUT':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        user: _objectSpread(_objectSpread({}, state.user), {}, {\n          isLoggedIn: false,\n          user: null\n        })\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default rootReducer;","map":{"version":3,"sources":["/Users/dong/nodebird/prepare/front/reducers/index.js"],"names":["HYDRATE","initialState","user","isLoggedIn","signUpData","loginData","post","mainPosts","loginAction","data","type","logoutAction","rootReducer","state","action"],"mappings":";;;;;;AAAA,SAAQA,OAAR,QAAsB,oBAAtB;AAEA,MAAMC,YAAY,GAAC;AAEhBC,EAAAA,IAAI,EAAC;AACJC,IAAAA,UAAU,EAAC,KADP;AAEDD,IAAAA,IAAI,EAAC,IAFJ;AAGDE,IAAAA,UAAU,EAAC,EAHV;AAIDC,IAAAA,SAAS,EAAC;AAJT,GAFW;AAQhBC,EAAAA,IAAI,EAAC;AACDC,IAAAA,SAAS,EAAC;AADT;AARW,CAAnB;AAaA,OAAO,MAAMC,WAAW,GAAEC,IAAD,IAAQ;AAC7B,SAAM;AACFC,IAAAA,IAAI,EAAC,QADH;AAEFD,IAAAA;AAFE,GAAN;AAIH,CALM;AAOP,OAAO,MAAME,YAAY,GAAEF,IAAD,IAAQ;AAC9B,SAAM;AACFC,IAAAA,IAAI,EAAC,SADH;AAEFD,IAAAA;AAFE,GAAN;AAIH,CALM,C,CAOP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;AACA,MAAMG,WAAW,GAAC,CAACC,KAAK,GAACZ,YAAP,EAAoBa,MAApB,KAA6B;AAC3C,UAAOA,MAAM,CAACJ,IAAd;AACI,SAAK,QAAL;AACI,6CACOG,KADP;AAEIX,QAAAA,IAAI,kCACGW,KAAK,CAACX,IADT;AAEAC,UAAAA,UAAU,EAAC,IAFX;AAGAD,UAAAA,IAAI,EAACY,MAAM,CAACL;AAHZ;AAFR;;AAQA,SAAK,SAAL;AACI,6CACOI,KADP;AAEIX,QAAAA,IAAI,kCACGW,KAAK,CAACX,IADT;AAEAC,UAAAA,UAAU,EAAC,KAFX;AAGAD,UAAAA,IAAI,EAAC;AAHL;AAFR;;AAQJ;AACI,aAAOW,KAAP;AApBZ;AAsBH,CAvBD;;AAwBA,eAAeD,WAAf","sourcesContent":["import {HYDRATE} from 'next-redux-wrapper'\n\nconst initialState={\n\n   user:{\n    isLoggedIn:false,\n       user:null,\n       signUpData:{},\n       loginData:{}\n   },\n   post:{\n       mainPosts:[],\n   }\n} \n \nexport const loginAction=(data)=>{\n    return{\n        type:'LOG_IN',\n        data\n    }\n}\n\nexport const logoutAction=(data)=>{\n    return{\n        type:'LOG_OUT',\n        data\n    }\n}\n\n//action\n//state를 바꾸고싶을때 항상 action을 만들어서 store에서 action을이용해 dispatch를 한다 그러면 그바꾼 데이터가 reducer로 전달된다  \n//그러면 기존state 말고 다음state가 만들어진다\n// const changeNickname={\n//     type:'CHANGE_NICKNAME',\n//     data:'dong'\n// }\n// //action creator 동적으로 데이터받는다 \n// const changeNicknames=(data)=>{\n//     return{\n//         type:'CHANGE_NICKNAME',\n//     }\n// }\n\n\n//reducer는 이전상태와 액션을 이용해서 다음상태를 만든다\nconst rootReducer=(state=initialState,action)=>{\n    switch(action.type){\n        case 'LOG_IN':\n            return{\n                ...state,\n                user:{\n                    ...state.user,\n                    isLoggedIn:true,\n                    user:action.data\n                },  \n            }\n            case 'LOG_OUT':\n                return{\n                    ...state,\n                    user:{\n                        ...state.user,\n                        isLoggedIn:false,\n                        user:null,\n                    },  \n                }\n            default:\n                return state\n    }\n}\nexport default rootReducer"]},"metadata":{},"sourceType":"module"}