{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport shortid from \"shortid\";\nexport const initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: '김동영'\n    },\n    content: '첫 번째 게시글',\n    Images: [{\n      id: shortid.generate(),\n      src: 'https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?udate=20180726'\n    }, {\n      id: shortid.generate(),\n      src: 'https://gimg.gilbut.co.kr/book/BN001958/rn_view_BN001958.jpg'\n    }, {\n      id: shortid.generate(),\n      src: 'https://gimg.gilbut.co.kr/book/BN001998/rn_view_BN001998.jpg'\n    }],\n    Comments: [{\n      id: shortid.generate(),\n      User: {\n        id: shortid.generate(),\n        nickname: 'nero'\n      },\n      content: '우와 개정판이 나왔군요~'\n    }, {\n      id: shortid.generate(),\n      User: {\n        id: shortid.generate(),\n        nickname: 'hero'\n      },\n      content: '얼른 사고싶어요~'\n    }]\n  }],\n  imagePaths: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n};\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const REMOVE_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport const addPost = data => {\n  return {\n    type: ADD_POST_REQUEST,\n    data\n  };\n};\nexport const addComment = data => {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data\n  };\n};\n\nconst dummyPost = data => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: '황현종'\n  },\n  Images: [],\n  Comments: []\n});\n\nconst dummyComment = data => ({\n  id: shortid.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: '황현종'\n  }\n});\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_POST_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostLoading: true,\n        addPostDone: false,\n        addPostError: null\n      });\n\n    case ADD_POST_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        mainPosts: [dummyPost(action.data), ...state.mainPosts],\n        addPostLoading: false,\n        addPostDone: true\n      });\n\n    case ADD_POST_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostLoading: false,\n        addPostError: action.error\n      });\n\n    case REMOVE_POST_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        removePostLoading: true,\n        removePostDone: false,\n        removePostError: null\n      });\n\n    case REMOVE_POST_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        mainPosts: state.mainPost.filter(v => v.id !== action.data),\n        removePostLoading: false,\n        removePostDone: true\n      });\n\n    case REMOVE_POST_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        removePostLoading: false,\n        removePostError: action.error\n      });\n\n    case ADD_COMMENT_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addCommentLoading: true,\n        addCommentDone: false,\n        addCommentError: null\n      });\n\n    case ADD_COMMENT_SUCCESS:\n      {\n        console.log('ttttt', action.data);\n        const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId);\n        const post = state.mainPosts[postIndex];\n        post.Comments = [dummyComment(action.data.content), ...post.Comments];\n        const mainPosts = [...state.mainPosts];\n        mainPosts[postIndex] = post;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          mainPosts,\n          addCommentLoading: false,\n          addCommentDone: true\n        });\n      }\n\n    case ADD_COMMENT_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addCommentLoading: false,\n        addCommentError: action.error\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/dong/nodebird/prepare/front/reducers/post.js"],"names":["shortid","initialState","mainPosts","id","User","nickname","content","Images","generate","src","Comments","imagePaths","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","dummyPost","dummyComment","reducer","state","action","error","mainPost","filter","v","console","log","postIndex","findIndex","postId","post"],"mappings":";;;;;;AAAA,OAAOA,OAAP,MAAoB,SAApB;AAEA,OAAO,MAAMC,YAAY,GAAC;AACtBC,EAAAA,SAAS,EAAE,CAAC;AACRC,IAAAA,EAAE,EAAE,CADI;AAERC,IAAAA,IAAI,EAAE;AACJD,MAAAA,EAAE,EAAE,CADA;AAEJE,MAAAA,QAAQ,EAAE;AAFN,KAFE;AAMRC,IAAAA,OAAO,EAAE,UAND;AAORC,IAAAA,MAAM,EAAE,CAAC;AACPJ,MAAAA,EAAE,EAACH,OAAO,CAACQ,QAAR,EADI;AAGPC,MAAAA,GAAG,EAAE;AAHE,KAAD,EAIL;AACDN,MAAAA,EAAE,EAACH,OAAO,CAACQ,QAAR,EADF;AAIDC,MAAAA,GAAG,EAAE;AAJJ,KAJK,EASL;AACDN,MAAAA,EAAE,EAACH,OAAO,CAACQ,QAAR,EADF;AAGDC,MAAAA,GAAG,EAAE;AAHJ,KATK,CAPA;AAqBRC,IAAAA,QAAQ,EAAE,CAAC;AACTP,MAAAA,EAAE,EAACH,OAAO,CAACQ,QAAR,EADM;AAETJ,MAAAA,IAAI,EAAE;AACJD,QAAAA,EAAE,EAACH,OAAO,CAACQ,QAAR,EADC;AAGJH,QAAAA,QAAQ,EAAE;AAHN,OAFG;AAOTC,MAAAA,OAAO,EAAE;AAPA,KAAD,EAQP;AACDH,MAAAA,EAAE,EAACH,OAAO,CAACQ,QAAR,EADF;AAGDJ,MAAAA,IAAI,EAAE;AACJD,QAAAA,EAAE,EAACH,OAAO,CAACQ,QAAR,EADC;AAGJH,QAAAA,QAAQ,EAAE;AAHN,OAHL;AAQDC,MAAAA,OAAO,EAAE;AARR,KARO;AArBF,GAAD,CADW;AAyCpBK,EAAAA,UAAU,EAAE,EAzCQ;AA0CpBC,EAAAA,cAAc,EAAC,KA1CK;AA2CpBC,EAAAA,WAAW,EAAC,KA3CQ;AA4CpBC,EAAAA,YAAY,EAAC,IA5CO;AA6CpBC,EAAAA,iBAAiB,EAAC,KA7CE;AA8CpBC,EAAAA,cAAc,EAAC,KA9CK;AA+CpBC,EAAAA,eAAe,EAAC,IA/CI;AAgDpBC,EAAAA,iBAAiB,EAAC,KAhDE;AAiDpBC,EAAAA,cAAc,EAAC,KAjDK;AAkDpBC,EAAAA,eAAe,EAAC;AAlDI,CAAnB;AAqDP,OAAO,MAAMC,gBAAgB,GAAE,kBAAxB;AACP,OAAO,MAAMC,gBAAgB,GAAE,kBAAxB;AACP,OAAO,MAAMC,gBAAgB,GAAE,kBAAxB;AAEP,OAAO,MAAMC,mBAAmB,GAAE,kBAA3B;AACP,OAAO,MAAMC,mBAAmB,GAAE,kBAA3B;AACP,OAAO,MAAMC,mBAAmB,GAAE,kBAA3B;AAEP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AAEP,OAAO,MAAMC,OAAO,GAAEC,IAAD,IAAQ;AAC1B,SAAM;AACLC,IAAAA,IAAI,EAAEX,gBADD;AAELU,IAAAA;AAFK,GAAN;AAIF,CALM;AAOP,OAAO,MAAME,UAAU,GAAEF,IAAD,IAAQ;AAC9B,SAAM;AACLC,IAAAA,IAAI,EAAEL,mBADD;AAELI,IAAAA;AAFK,GAAN;AAID,CALM;;AAQP,MAAMG,SAAS,GAAGH,IAAD,KAAU;AACvB5B,EAAAA,EAAE,EAAE4B,IAAI,CAAC5B,EADc;AAEvBG,EAAAA,OAAO,EAAEyB,IAAI,CAACzB,OAFS;AAGvBF,EAAAA,IAAI,EAAE;AACJD,IAAAA,EAAE,EAAE,CADA;AAEJE,IAAAA,QAAQ,EAAE;AAFN,GAHiB;AAOvBE,EAAAA,MAAM,EAAE,EAPe;AAQvBG,EAAAA,QAAQ,EAAE;AARa,CAAV,CAAjB;;AAWA,MAAMyB,YAAY,GAAEJ,IAAD,KAAS;AAC1B5B,EAAAA,EAAE,EAAEH,OAAO,CAACQ,QAAR,EADsB;AAE1BF,EAAAA,OAAO,EAAEyB,IAFiB;AAG1B3B,EAAAA,IAAI,EAAE;AACJD,IAAAA,EAAE,EAAE,CADA;AAEJE,IAAAA,QAAQ,EAAE;AAFN;AAHoB,CAAT,CAAnB;;AAaA,MAAM+B,OAAO,GAAC,CAACC,KAAK,GAACpC,YAAP,EAAoBqC,MAApB,KAA6B;AACvC,UAAOA,MAAM,CAACN,IAAd;AACI,SAAKX,gBAAL;AACI,6CACKgB,KADL;AAEEzB,QAAAA,cAAc,EAAC,IAFjB;AAGEC,QAAAA,WAAW,EAAC,KAHd;AAIEC,QAAAA,YAAY,EAAC;AAJf;;AAMJ,SAAKQ,gBAAL;AACU,6CACKe,KADL;AAEEnC,QAAAA,SAAS,EAAC,CAACgC,SAAS,CAACI,MAAM,CAACP,IAAR,CAAV,EAAwB,GAAGM,KAAK,CAACnC,SAAjC,CAFZ;AAGEU,QAAAA,cAAc,EAAC,KAHjB;AAIEC,QAAAA,WAAW,EAAC;AAJd;;AAMV,SAAKU,gBAAL;AACU,6CACKc,KADL;AAEEzB,QAAAA,cAAc,EAAC,KAFjB;AAGEE,QAAAA,YAAY,EAACwB,MAAM,CAACC;AAHtB;;AAOA,SAAKf,mBAAL;AACE,6CACKa,KADL;AAEEtB,QAAAA,iBAAiB,EAAC,IAFpB;AAGEC,QAAAA,cAAc,EAAC,KAHjB;AAIEC,QAAAA,eAAe,EAAC;AAJlB;;AAMJ,SAAKQ,mBAAL;AACU,6CACKY,KADL;AAEEnC,QAAAA,SAAS,EAACmC,KAAK,CAACG,QAAN,CAAeC,MAAf,CAAuBC,CAAD,IAAKA,CAAC,CAACvC,EAAF,KAAOmC,MAAM,CAACP,IAAzC,CAFZ;AAGEhB,QAAAA,iBAAiB,EAAC,KAHpB;AAIEC,QAAAA,cAAc,EAAC;AAJjB;;AAMV,SAAKU,mBAAL;AACU,6CACKW,KADL;AAEEtB,QAAAA,iBAAiB,EAAC,KAFpB;AAGEE,QAAAA,eAAe,EAACqB,MAAM,CAACC;AAHzB;;AAOlB,SAAKZ,mBAAL;AACY,6CACKU,KADL;AAEEnB,QAAAA,iBAAiB,EAAC,IAFpB;AAGEC,QAAAA,cAAc,EAAC,KAHjB;AAIEC,QAAAA,eAAe,EAAC;AAJlB;;AAQZ,SAAKQ,mBAAL;AAAyB;AACrBe,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAoBN,MAAM,CAACP,IAA3B;AACC,cAAMc,SAAS,GAACR,KAAK,CAACnC,SAAN,CAAgB4C,SAAhB,CAA2BJ,CAAD,IAAKA,CAAC,CAACvC,EAAF,KAAOmC,MAAM,CAACP,IAAP,CAAYgB,MAAlD,CAAhB;AACA,cAAMC,IAAI,GAACX,KAAK,CAACnC,SAAN,CAAgB2C,SAAhB,CAAX;AACAG,QAAAA,IAAI,CAACtC,QAAL,GAAc,CAACyB,YAAY,CAACG,MAAM,CAACP,IAAP,CAAYzB,OAAb,CAAb,EAAmC,GAAG0C,IAAI,CAACtC,QAA3C,CAAd;AACA,cAAMR,SAAS,GAAC,CAAC,GAAGmC,KAAK,CAACnC,SAAV,CAAhB;AACAA,QAAAA,SAAS,CAAC2C,SAAD,CAAT,GAAqBG,IAArB;AACA,+CACIX,KADJ;AAECnC,UAAAA,SAFD;AAGCgB,UAAAA,iBAAiB,EAAC,KAHnB;AAICC,UAAAA,cAAc,EAAC;AAJhB;AAMQ;;AACb,SAAKU,mBAAL;AACc,6CACIQ,KADJ;AAECnB,QAAAA,iBAAiB,EAAC,KAFnB;AAGCE,QAAAA,eAAe,EAACkB,MAAM,CAACC;AAHxB;;AAKd;AACI,aAAOF,KAAP;AA3ER;AA6EH,CA9ED;;AAgFA,eAAeD,OAAf","sourcesContent":["import shortid from \"shortid\";\n\nexport const initialState={\n    mainPosts: [{\n        id: 1,\n        User: {\n          id: 1,\n          nickname: '김동영',\n        },\n        content: '첫 번째 게시글',\n        Images: [{\n          id:shortid.generate(), \n\n          src: 'https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?udate=20180726',\n        }, {\n          id:shortid.generate(), \n\n\n          src: 'https://gimg.gilbut.co.kr/book/BN001958/rn_view_BN001958.jpg',\n        }, {\n          id:shortid.generate(), \n\n          src: 'https://gimg.gilbut.co.kr/book/BN001998/rn_view_BN001998.jpg',\n        }],\n        Comments: [{\n          id:shortid.generate(), \n          User: {\n            id:shortid.generate(), \n\n            nickname: 'nero',\n          },\n          content: '우와 개정판이 나왔군요~',\n        }, {\n          id:shortid.generate(), \n\n          User: {\n            id:shortid.generate(), \n \n            nickname: 'hero',\n          },\n          content: '얼른 사고싶어요~',\n        }]\n      }],\n      imagePaths: [],\n      addPostLoading:false,\n      addPostDone:false,\n      addPostError:null,\n      removePostLoading:false,\n      removePostDone:false,\n      removePostError:null,\n      addCommentLoading:false,\n      addCommentDone:false,\n      addCommentError:null,\n    }\n\nexport const ADD_POST_REQUEST ='ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS ='ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE ='ADD_POST_FAILURE';\n\nexport const REMOVE_POST_REQUEST ='ADD_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS ='ADD_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE ='ADD_POST_FAILURE';\n\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\n\nexport const addPost=(data)=>{\n   return{\n    type :ADD_POST_REQUEST,\n    data\n   }\n}\n\nexport const addComment=(data)=>{\n  return{\n   type :ADD_COMMENT_REQUEST,\n   data\n  }\n}\n\n\nconst dummyPost =(data)=>( {\n    id: data.id,\n    content: data.content ,\n    User: {\n      id: 1,\n      nickname: '황현종',\n    },\n    Images: [],\n    Comments: [],\n  });\n\nconst dummyComment=(data)=>({\n  id: shortid.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: '황현종',\n  },\n  \n})\n  \n\n\n\nconst reducer=(state=initialState,action)=>{\n    switch(action.type){\n        case ADD_POST_REQUEST:\n            return{\n              ...state,\n              addPostLoading:true,\n              addPostDone:false,\n              addPostError:null\n            }\n        case ADD_POST_SUCCESS:\n                  return{\n                    ...state,\n                    mainPosts:[dummyPost(action.data),...state.mainPosts],\n                    addPostLoading:false,\n                    addPostDone:true\n                  }\n        case ADD_POST_FAILURE:\n                  return{\n                    ...state,\n                    addPostLoading:false,\n                    addPostError:action.error\n    \n                    \n                  }\n                  case REMOVE_POST_REQUEST:\n                    return{\n                      ...state,\n                      removePostLoading:true,\n                      removePostDone:false,\n                      removePostError:null\n                    }\n                case REMOVE_POST_SUCCESS:\n                          return{\n                            ...state,\n                            mainPosts:state.mainPost.filter((v)=>v.id!==action.data),\n                            removePostLoading:false,\n                            removePostDone:true\n                          } \n                case REMOVE_POST_FAILURE:\n                          return{\n                            ...state,\n                            removePostLoading:false,\n                            removePostError:action.error\n            \n                            \n                          }\n        case ADD_COMMENT_REQUEST:\n                    return{\n                      ...state,\n                      addCommentLoading:true,\n                      addCommentDone:false,\n                      addCommentError:null\n                        \n        \n                    }\n        case ADD_COMMENT_SUCCESS:{\n            console.log('ttttt',action.data)\n             const postIndex=state.mainPosts.findIndex((v)=>v.id===action.data.postId)\n             const post=state.mainPosts[postIndex]\n             post.Comments=[dummyComment(action.data.content),...post.Comments]\n             const mainPosts=[...state.mainPosts]\n             mainPosts[postIndex]=post\n             return{\n              ...state,\n              mainPosts,\n              addCommentLoading:false,\n              addCommentDone:true\n              }\n                    }\n        case ADD_COMMENT_FAILURE:\n                      return{\n                       ...state,\n                       addCommentLoading:false,\n                       addCommentError:action.error    \n                      }\n        default:\n            return state\n    }\n}\n\nexport default reducer"]},"metadata":{},"sourceType":"module"}