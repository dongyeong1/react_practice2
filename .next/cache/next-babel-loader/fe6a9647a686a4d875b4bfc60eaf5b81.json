{"ast":null,"code":"import { applyMiddleware, createStore, compose } from 'redux';\nimport { createWrapper } from 'next-redux-wrapper';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga ';\nimport reducer from '../reducers';\n\nconst configureStore = context => {\n  const sagaMiddleware = createSagaMiddleware();\n  console.log(context);\n  const middlewares = [];\n  const enhancer = false ? compose(applyMiddleware(...middlewares)) : composeWithDevTools(applyMiddleware(...middlewares));\n  const store = createStore(reducer, enhancer);\n  return store;\n};\n\nconst wrapper = createWrapper(configureStore, {\n  debug: true\n});\nexport default wrapper;","map":{"version":3,"sources":["/Users/dong/nodebird/prepare/front/store/configureStore.js"],"names":["applyMiddleware","createStore","compose","createWrapper","composeWithDevTools","createSagaMiddleware","reducer","configureStore","context","sagaMiddleware","console","log","middlewares","enhancer","store","wrapper","debug"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,WAA1B,EAAuCC,OAAvC,QAAsD,OAAtD;AACA,SAASC,aAAT,QAA8B,oBAA9B;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,oBAAP,MAAiC,aAAjC;AAEA,OAAOC,OAAP,MAAoB,aAApB;;AAEA,MAAMC,cAAc,GAAIC,OAAD,IAAa;AAClC,QAAMC,cAAc,GAACJ,oBAAoB,EAAzC;AACAK,EAAAA,OAAO,CAACC,GAAR,CAAYH,OAAZ;AACA,QAAMI,WAAW,GAAG,EAApB;AACA,QAAMC,QAAQ,GAAG,QACbX,OAAO,CAACF,eAAe,CAAC,GAAGY,WAAJ,CAAhB,CADM,GAEbR,mBAAmB,CACnBJ,eAAe,CAAC,GAAGY,WAAJ,CADI,CAFvB;AAKA,QAAME,KAAK,GAAGb,WAAW,CAACK,OAAD,EAAUO,QAAV,CAAzB;AACA,SAAOC,KAAP;AACD,CAXD;;AAaA,MAAMC,OAAO,GAAGZ,aAAa,CAACI,cAAD,EAAiB;AAAES,EAAAA,KAAK;AAAP,CAAjB,CAA7B;AAEA,eAAeD,OAAf","sourcesContent":["import { applyMiddleware, createStore, compose } from 'redux';\nimport { createWrapper } from 'next-redux-wrapper';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga ';\n\nimport reducer from '../reducers';\n\nconst configureStore = (context) => {\n  const sagaMiddleware=createSagaMiddleware();\n  console.log(context);\n  const middlewares = [];\n  const enhancer = process.env.NODE_ENV === 'production'\n    ? compose(applyMiddleware(...middlewares))\n    : composeWithDevTools(\n      applyMiddleware(...middlewares),\n    );\n  const store = createStore(reducer, enhancer);\n  return store;\n};\n\nconst wrapper = createWrapper(configureStore, { debug: process.env.NODE_ENV === 'development' });\n\nexport default wrapper;"]},"metadata":{},"sourceType":"module"}