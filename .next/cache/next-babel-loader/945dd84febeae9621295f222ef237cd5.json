{"ast":null,"code":"import { all, delay, put, takeLatest, fork } from \"redux-saga/effects\";\nimport axios from 'axios';\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, generateDummyPost, LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\nimport shortid from \"shortid\";\n\nfunction addPostAPI() {// return axios.post('/api/post',data)\n}\n\nfunction* addPost(action) {\n  const id = shortid.generate();\n\n  try {\n    yield delay(1000);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI() {// return axios.post('/api/post',data)\n}\n\nfunction* removePost(action) {\n  const id = shortid.generate();\n\n  try {\n    yield delay(1000);\n    console.log('aaaaaa');\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n} //3번\n\n\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n} //2번\n\n\nfunction* addComment(action) {\n  try {\n    // const result = yield call(addCommentAPI, action.data);\n    yield delay(1000); //4번\n\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n} //1번\n\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchRemvoePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment), fork(watchRemvoePost)]);\n}","map":{"version":3,"sources":["/Users/dong/nodebird/prepare/front/sagas/post.js"],"names":["all","delay","put","takeLatest","fork","axios","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","generateDummyPost","LOAD_POSTS_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","ADD_POST_TO_ME","REMOVE_POST_OF_ME","shortid","addPostAPI","addPost","action","id","generate","type","data","content","err","response","removePostAPI","removePost","console","log","addCommentAPI","post","postId","addComment","watchAddPost","watchAddComment","watchRemvoePost","postSaga"],"mappings":"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","sourcesContent":["import { all, delay, put, takeLatest,fork } from \"redux-saga/effects\";\nimport axios from 'axios'\nimport {\n    ADD_COMMENT_FAILURE,\n    ADD_COMMENT_REQUEST,\n    ADD_COMMENT_SUCCESS,\n    ADD_POST_FAILURE,\n    ADD_POST_REQUEST,\n    ADD_POST_SUCCESS,\n    generateDummyPost,\n    LOAD_POSTS_FAILURE,\n    LOAD_POSTS_REQUEST,\n    LOAD_POSTS_SUCCESS,\n    REMOVE_POST_FAILURE,\n    REMOVE_POST_REQUEST,\n    REMOVE_POST_SUCCESS,\n  } from '../reducers/post';\nimport { ADD_POST_TO_ME ,REMOVE_POST_OF_ME} from \"../reducers/user\";\nimport shortid from \"shortid\";\n\nfunction addPostAPI(){\n    // return axios.post('/api/post',data)\n}\n\nfunction* addPost(action){\n    const id=shortid.generate();\n     try{\n        yield delay(1000)\n        yield put({\n            type:ADD_POST_SUCCESS,\n            data:{\n                id,\n                content:action.data\n            }\n        })\n        yield put({\n            type:ADD_POST_TO_ME,\n            data:id\n        })\n    }catch(err){\n        yield put({\n            type:ADD_POST_FAILURE,\n            data:err.response.data,\n        })\n    }\n}\n\nfunction removePostAPI(){\n    // return axios.post('/api/post',data)\n}\n\nfunction* removePost(action){ \n    const id=shortid.generate();\n     try{\n        yield delay(1000)\n        console.log('aaaaaa')\n        yield put({\n            type:REMOVE_POST_SUCCESS,\n            data:action.data\n        })\n        yield put({\n            type:REMOVE_POST_OF_ME, \n            data:action.data\n        })\n    }catch(err){\n        yield put({\n            type:REMOVE_POST_FAILURE,\n            data:err.response.data,\n        })\n    }\n}\n\n//3번\nfunction addCommentAPI(data) {\n    return axios.post(`/api/post/${data.postId}/comment`, data);\n  }\n//2번\n  function* addComment(action) {\n    try {\n      // const result = yield call(addCommentAPI, action.data);\n      yield delay(1000);\n     //4번\n      yield put({\n        type: ADD_COMMENT_SUCCESS,\n        data: action.data,\n      });\n    } catch (err) {\n      yield put({\n        type: ADD_COMMENT_FAILURE,\n        data: err.response.data,\n      });\n    }\n  }\n  \n //1번\nfunction* watchAddPost(){\n    yield takeLatest(ADD_POST_REQUEST,addPost)\n}\n\nfunction* watchAddComment(){\n    yield takeLatest(ADD_COMMENT_REQUEST,addComment)\n}\n\nfunction* watchRemvoePost(){\n    yield takeLatest(REMOVE_POST_REQUEST,removePost)\n}\n\nexport default function* postSaga(){\n    yield all([\n        fork(watchAddPost),\n        fork(watchAddComment),\n        fork(watchRemvoePost),\n    ])\n}"]},"metadata":{},"sourceType":"module"}