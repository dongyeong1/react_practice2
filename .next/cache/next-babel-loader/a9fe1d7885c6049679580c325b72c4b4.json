{"ast":null,"code":"import { Result } from 'antd';\nimport { actionChannel, all, delay, fork, put, takeLatest } from 'redux-saga/effects';\nimport signup from '../pages/signup';\nimport { FOLLOW_FAILURE, FOLLOW_REQUEST, FOLLOW_SUCCESS, LOG_IN_FAILURE, LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_OUT_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, SIGN_UP_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, UNFOLLOW_FAILURE, UNFOLLOW_REQUEST, UNFOLLOW_SUCCESS } from '../reducers/user';\n\nfunction logInAPI() {// return axios.post('/api/post')\n}\n\nfunction* login(action) {\n  try {\n    yield delay(1000);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction logOutAPI() {// return axios.post('/api/post')\n}\n\nfunction* logout() {\n  try {\n    yield delay(1000);\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction signUpAPI() {// return axios.post('/api/post')\n}\n\nfunction* signUp() {\n  try {\n    yield delay(1000);\n    yield put({\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  yield takeLatest(LOG_IN_REQUEST, login);\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logout);\n}\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut), fork(watchSignUp)]);\n}","map":{"version":3,"sources":["/Users/dong/nodebird/prepare/front/sagas/user.js"],"names":["Result","actionChannel","all","delay","fork","put","takeLatest","signup","FOLLOW_FAILURE","FOLLOW_REQUEST","FOLLOW_SUCCESS","LOG_IN_FAILURE","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_OUT_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","SIGN_UP_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","UNFOLLOW_FAILURE","UNFOLLOW_REQUEST","UNFOLLOW_SUCCESS","logInAPI","login","action","type","data","err","error","response","logOutAPI","logout","signUpAPI","signUp","watchLogIn","watchLogOut","watchSignUp","userSaga"],"mappings":"AAAA,SAASA,MAAT,QAAuB,MAAvB;AACA,SAASC,aAAT,EAAwBC,GAAxB,EAA6BC,KAA7B,EAAoCC,IAApC,EAA0CC,GAA1C,EAA+CC,UAA/C,QAAgE,oBAAhE;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AAEA,SACIC,cADJ,EAEIC,cAFJ,EAGIC,cAHJ,EAIIC,cAJJ,EAKIC,cALJ,EAMIC,cANJ,EAOIC,eAPJ,EAQIC,eARJ,EASIC,eATJ,EAUIC,eAVJ,EAWIC,eAXJ,EAYIC,eAZJ,EAaIC,gBAbJ,EAcIC,gBAdJ,EAeIC,gBAfJ,QAgBS,kBAhBT;;AAmBA,SAASC,QAAT,GAAmB,CACf;AACH;;AAED,UAAUC,KAAV,CAAgBC,MAAhB,EAAuB;AACnB,MAAG;AACC,UAAMtB,KAAK,CAAC,IAAD,CAAX;AACA,UAAME,GAAG,CAAC;AACNqB,MAAAA,IAAI,EAACb,cADC;AAENc,MAAAA,IAAI,EAACF,MAAM,CAACE;AAFN,KAAD,CAAT;AAIH,GAND,CAOA,OAAMC,GAAN,EAAU;AACN,UAAMvB,GAAG,CAAC;AACNqB,MAAAA,IAAI,EAACf,cADC;AAENkB,MAAAA,KAAK,EAACD,GAAG,CAACE,QAAJ,CAAaH;AAFb,KAAD,CAAT;AAKH;AAEJ;;AAED,SAASI,SAAT,GAAoB,CAChB;AACH;;AAED,UAAUC,MAAV,GAAkB;AACd,MAAG;AACC,UAAM7B,KAAK,CAAC,IAAD,CAAX;AACA,UAAME,GAAG,CAAC;AACNqB,MAAAA,IAAI,EAACV;AADC,KAAD,CAAT;AAGH,GALD,CAKC,OAAMY,GAAN,EAAU;AACP,UAAMvB,GAAG,CAAC;AACNqB,MAAAA,IAAI,EAACZ,eADC;AAENe,MAAAA,KAAK,EAACD,GAAG,CAACE,QAAJ,CAAaH;AAFb,KAAD,CAAT;AAKH;AAEJ;;AAED,SAASM,SAAT,GAAoB,CAChB;AACH;;AAGD,UAAUC,MAAV,GAAkB;AACd,MAAG;AACC,UAAM/B,KAAK,CAAC,IAAD,CAAX;AACA,UAAME,GAAG,CAAC;AACNqB,MAAAA,IAAI,EAACP;AADC,KAAD,CAAT;AAGH,GALD,CAKC,OAAMS,GAAN,EAAU;AACP,UAAMvB,GAAG,CAAC;AACNqB,MAAAA,IAAI,EAACT,eADC;AAENY,MAAAA,KAAK,EAACD,GAAG,CAACE,QAAJ,CAAaH;AAFb,KAAD,CAAT;AAKH;AAEJ;;AAED,UAAUQ,UAAV,GAAsB;AAClB,QAAM7B,UAAU,CAACM,cAAD,EAAgBY,KAAhB,CAAhB;AAEH;;AACD,UAAUY,WAAV,GAAuB;AACnB,QAAM9B,UAAU,CAACS,eAAD,EAAiBiB,MAAjB,CAAhB;AACH;;AAED,UAAUK,WAAV,GAAuB;AACnB,QAAM/B,UAAU,CAACY,eAAD,EAAiBgB,MAAjB,CAAhB;AACH;;AAGD,eAAe,UAAUI,QAAV,GAAoB;AAC/B,QAAMpC,GAAG,CAAC,CACNE,IAAI,CAAC+B,UAAD,CADE,EAEN/B,IAAI,CAACgC,WAAD,CAFE,EAGNhC,IAAI,CAACiC,WAAD,CAHE,CAAD,CAAT;AAKH","sourcesContent":["import { Result } from 'antd';\nimport { actionChannel, all, delay, fork, put, takeLatest} from 'redux-saga/effects'\nimport signup from '../pages/signup';\n\nimport {\n    FOLLOW_FAILURE,\n    FOLLOW_REQUEST,\n    FOLLOW_SUCCESS,\n    LOG_IN_FAILURE,\n    LOG_IN_REQUEST,\n    LOG_IN_SUCCESS,\n    LOG_OUT_FAILURE,\n    LOG_OUT_REQUEST,\n    LOG_OUT_SUCCESS,\n    SIGN_UP_FAILURE,\n    SIGN_UP_REQUEST,\n    SIGN_UP_SUCCESS,\n    UNFOLLOW_FAILURE,\n    UNFOLLOW_REQUEST,\n    UNFOLLOW_SUCCESS,\n  } from '../reducers/user';\n  \n\nfunction logInAPI(){\n    // return axios.post('/api/post')\n}\n\nfunction* login(action){\n    try{\n        yield delay(1000);\n        yield put({\n            type:LOG_IN_SUCCESS,\n            data:action.data\n        })\n    }\n    catch(err){\n        yield put({\n            type:LOG_IN_FAILURE,\n            error:err.response.data,\n             \n        })\n    }\n\n}\n\nfunction logOutAPI(){\n    // return axios.post('/api/post')\n}\n\nfunction* logout(){\n    try{\n        yield delay(1000);\n        yield put({\n            type:LOG_OUT_SUCCESS,\n        })\n    }catch(err){\n        yield put({\n            type:LOG_OUT_FAILURE,\n            error:err.response.data,\n             \n        })\n    }\n\n}\n\nfunction signUpAPI(){\n    // return axios.post('/api/post')\n}\n\n\nfunction* signUp(){\n    try{\n        yield delay(1000);\n        yield put({\n            type:SIGN_UP_SUCCESS,\n        })\n    }catch(err){\n        yield put({\n            type:SIGN_UP_FAILURE,\n            error:err.response.data,\n             \n        })\n    }\n\n}\n\nfunction* watchLogIn(){\n    yield takeLatest(LOG_IN_REQUEST,login)\n\n}\nfunction* watchLogOut(){\n    yield takeLatest(LOG_OUT_REQUEST,logout)\n}\n\nfunction* watchSignUp(){\n    yield takeLatest(SIGN_UP_REQUEST,signUp)\n}\n\n\nexport default function* userSaga(){\n    yield all([\n        fork(watchLogIn),\n        fork(watchLogOut),\n        fork(watchSignUp),\n    ])\n}"]},"metadata":{},"sourceType":"module"}