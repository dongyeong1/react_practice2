{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(likePost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(unlikePost),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(loadPosts),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(removePost),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(addComment),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddComment),\n    _marked9 = /*#__PURE__*/_regeneratorRuntime.mark(watchRemvoePost),\n    _marked10 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadPosts),\n    _marked11 = /*#__PURE__*/_regeneratorRuntime.mark(watchLikePost),\n    _marked12 = /*#__PURE__*/_regeneratorRuntime.mark(watchUnlikePost),\n    _marked13 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport { all, delay, put, takeLatest, fork, throttle, call } from \"redux-saga/effects\";\nimport axios from 'axios';\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, generateDummyPost, LIKE_POST_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, UNLIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\nimport shortid from \"shortid\";\n\nfunction likePostAPI(data) {\n  return axios.patch(\"/post/\".concat(data, \"/like\"));\n}\n\nfunction likePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function likePost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(likePostAPI, action.data);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            type: LIKE_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context.next = 13;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          _context.next = 13;\n          return put({\n            type: LIKE_POST_FAILURE,\n            error: _context.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nfunction unlikePostAPI(data) {\n  return axios[\"delete\"](\"/post/\".concat(data, \"/like\"));\n}\n\nfunction unlikePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function unlikePost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(unlikePostAPI, action.data);\n\n        case 3:\n          result = _context2.sent;\n          _context2.next = 6;\n          return put({\n            type: UNLIKE_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context2.next = 13;\n          break;\n\n        case 8:\n          _context2.prev = 8;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.error(_context2.t0);\n          _context2.next = 13;\n          return put({\n            type: UNLIKE_POST_FAILURE,\n            error: _context2.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 8]]);\n}\n\nfunction loadPostsAPI(data) {\n  return axios.get('/posts', data);\n}\n\nfunction loadPosts(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadPosts$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(loadPostsAPI, action.data);\n\n        case 3:\n          result = _context3.sent;\n          _context3.next = 6;\n          return put({\n            type: LOAD_POSTS_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context3.next = 13;\n          break;\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.error(_context3.t0);\n          _context3.next = 13;\n          return put({\n            type: LOAD_POSTS_FAILURE,\n            data: _context3.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 8]]);\n}\n\nfunction addPostAPI(data) {\n  return axios.post('/post', {\n    content: data\n  });\n}\n\nfunction addPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addPost$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return call(addPostAPI, action.data);\n\n        case 3:\n          result = _context4.sent;\n          _context4.next = 6;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context4.next = 8;\n          return put({\n            type: ADD_POST_TO_ME,\n            data: result.data.id\n          });\n\n        case 8:\n          _context4.next = 14;\n          break;\n\n        case 10:\n          _context4.prev = 10;\n          _context4.t0 = _context4[\"catch\"](0);\n          _context4.next = 14;\n          return put({\n            type: ADD_POST_FAILURE,\n            data: _context4.t0.response.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[0, 10]]);\n}\n\nfunction removePostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction removePost(action) {\n  return _regeneratorRuntime.wrap(function removePost$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context5.next = 5;\n          return put({\n            type: REMOVE_POST_SUCCESS,\n            data: action.data\n          });\n\n        case 5:\n          _context5.next = 7;\n          return put({\n            type: REMOVE_POST_OF_ME,\n            data: action.data\n          });\n\n        case 7:\n          _context5.next = 13;\n          break;\n\n        case 9:\n          _context5.prev = 9;\n          _context5.t0 = _context5[\"catch\"](0);\n          _context5.next = 13;\n          return put({\n            type: REMOVE_POST_FAILURE,\n            data: _context5.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 9]]);\n} //3번\n\n\nfunction addCommentAPI(data) {\n  return axios.post(\"/post/\".concat(data.postId, \"/comment\"), data);\n} //2번\n\n\nfunction addComment(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addComment$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.prev = 0;\n          _context6.next = 3;\n          return call(addCommentAPI, action.data);\n\n        case 3:\n          result = _context6.sent;\n          _context6.next = 6;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context6.next = 13;\n          break;\n\n        case 8:\n          _context6.prev = 8;\n          _context6.t0 = _context6[\"catch\"](0);\n          console.error(_context6.t0);\n          _context6.next = 13;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            data: _context6.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6, null, [[0, 8]]);\n} //1번\n\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n}\n\nfunction watchRemvoePost() {\n  return _regeneratorRuntime.wrap(function watchRemvoePost$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.next = 2;\n          return takeLatest(REMOVE_POST_REQUEST, removePost);\n\n        case 2:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9);\n}\n\nfunction watchLoadPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadPosts$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          _context10.next = 2;\n          return throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n\n        case 2:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, _marked10);\n}\n\nfunction watchLikePost() {\n  return _regeneratorRuntime.wrap(function watchLikePost$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          _context11.next = 2;\n          return takeLatest(LIKE_POST_REQUEST, likePost);\n\n        case 2:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, _marked11);\n}\n\nfunction watchUnlikePost() {\n  return _regeneratorRuntime.wrap(function watchUnlikePost$(_context12) {\n    while (1) {\n      switch (_context12.prev = _context12.next) {\n        case 0:\n          _context12.next = 2;\n          return takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n\n        case 2:\n        case \"end\":\n          return _context12.stop();\n      }\n    }\n  }, _marked12);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context13) {\n    while (1) {\n      switch (_context13.prev = _context13.next) {\n        case 0:\n          _context13.next = 2;\n          return all([fork(watchLikePost), fork(watchUnlikePost), fork(watchAddPost), fork(watchAddComment), fork(watchRemvoePost), fork(watchLoadPosts)]);\n\n        case 2:\n        case \"end\":\n          return _context13.stop();\n      }\n    }\n  }, _marked13);\n}","map":{"version":3,"sources":["/Users/dong/nodebird/prepare/front/sagas/post.js"],"names":["likePost","unlikePost","loadPosts","addPost","removePost","addComment","watchAddPost","watchAddComment","watchRemvoePost","watchLoadPosts","watchLikePost","watchUnlikePost","postSaga","all","delay","put","takeLatest","fork","throttle","call","axios","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","generateDummyPost","LIKE_POST_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","LOAD_POSTS_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","ADD_POST_TO_ME","REMOVE_POST_OF_ME","shortid","likePostAPI","data","patch","action","result","type","console","error","response","unlikePostAPI","loadPostsAPI","get","addPostAPI","post","content","id","removePostAPI","addCommentAPI","postId"],"mappings":"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","sourcesContent":["import { all, delay, put, takeLatest,fork ,throttle,call} from \"redux-saga/effects\";\nimport axios from 'axios'\nimport {\n    ADD_COMMENT_FAILURE,\n    ADD_COMMENT_REQUEST,\n    ADD_COMMENT_SUCCESS,\n    ADD_POST_FAILURE,\n    ADD_POST_REQUEST,\n    ADD_POST_SUCCESS,\n    generateDummyPost,\n    LIKE_POST_FAILURE,\n  LIKE_POST_REQUEST, LIKE_POST_SUCCESS,\n  UNLIKE_POST_FAILURE,\n  UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS,\n    LOAD_POSTS_FAILURE,\n    LOAD_POSTS_REQUEST,\n    LOAD_POSTS_SUCCESS,\n    REMOVE_POST_FAILURE,\n    REMOVE_POST_REQUEST,\n    REMOVE_POST_SUCCESS,\n  } from '../reducers/post';\nimport { ADD_POST_TO_ME ,REMOVE_POST_OF_ME} from \"../reducers/user\";\nimport shortid from \"shortid\";\n\n\nfunction likePostAPI(data) {\n  return axios.patch(`/post/${data}/like`);\n}\n\nfunction* likePost(action) {\n  try {\n    const result = yield call(likePostAPI, action.data);\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LIKE_POST_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction unlikePostAPI(data) {\n  return axios.delete(`/post/${data}/like`);\n}\n\nfunction* unlikePost(action) {\n  try {\n    const result = yield call(unlikePostAPI, action.data);\n    yield put({\n      type: UNLIKE_POST_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: UNLIKE_POST_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction loadPostsAPI(data) {\n    return axios.get('/posts', data);\n  }\n  \n  function* loadPosts(action) {\n    try {\n      const result = yield call(loadPostsAPI, action.data);\n      yield put({\n        type: LOAD_POSTS_SUCCESS,\n        data:result.data\n      });\n    } catch (err) {\n      console.error(err);\n      yield put({\n        type: LOAD_POSTS_FAILURE,\n        data: err.response.data,\n      });\n    }\n  }\n   \n\nfunction addPostAPI(data){\nreturn axios.post('/post',{content:data})\n}\n\nfunction* addPost(action){\n     try{\n      const result=yield call (addPostAPI,action.data)\n\n        yield put({\n            type:ADD_POST_SUCCESS,\n            data:result.data\n           \n        })\n        yield put({\n            type:ADD_POST_TO_ME,\n            data:result.data.id\n        })\n    }catch(err){\n        yield put({\n            type:ADD_POST_FAILURE,\n            data:err.response.data,\n        })\n    }\n}\n\nfunction removePostAPI(data){\n    return axios.post('/api/post',data)\n}\n\nfunction* removePost(action){ \n     \n     try{\n        yield delay(1000)\n        yield put({\n            type:REMOVE_POST_SUCCESS,\n            data:action.data\n        })\n        yield put({\n            type:REMOVE_POST_OF_ME, \n            data:action.data\n        })\n    }catch(err){\n        yield put({\n            type:REMOVE_POST_FAILURE,\n            data:err.response.data,\n        })\n    }\n}\n\n//3번\nfunction addCommentAPI(data) {\n    return axios.post(`/post/${data.postId}/comment`, data);\n  }\n//2번\n  function* addComment(action) {\n    try {\n      const result = yield call(addCommentAPI, action.data);\n     //4번\n      yield put({\n        type: ADD_COMMENT_SUCCESS,\n        data: result.data,\n      });\n    } catch (err) {\n        console.error(err)\n      yield put({\n        type: ADD_COMMENT_FAILURE,\n        data: err.response.data,\n      });\n    }\n  }\n  \n //1번\nfunction* watchAddPost(){\n    yield takeLatest(ADD_POST_REQUEST,addPost)\n}\n\nfunction* watchAddComment(){\n    yield takeLatest(ADD_COMMENT_REQUEST,addComment)\n}\n\nfunction* watchRemvoePost(){\n    yield takeLatest(REMOVE_POST_REQUEST,removePost)\n}\n\nfunction* watchLoadPosts(){\n    yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n    //throttle은 5초동안 다른리퀘스트를 한번제와하고 성공안시키지만 요청들이 쏟아졌을때 5초뒤에 딴 요청을 성공시킨다.\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\n\nfunction* watchUnlikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\n\n\nexport default function* postSaga(){\n    yield all([\n      fork(watchLikePost),\n      fork(watchUnlikePost),\n        fork(watchAddPost),\n        fork(watchAddComment),\n        fork(watchRemvoePost),\n        fork(watchLoadPosts),  \n      ])\n}"]},"metadata":{},"sourceType":"module"}