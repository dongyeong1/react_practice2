{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { HYDRATE } from 'next-redux-wrapper';\nimport { combineReducers } from 'redux';\nimport user from './user';\nimport post from './post'; //action\n//state를 바꾸고싶을때 항상 action을 만들어서 store에서 action을이용해 dispatch를 한다 그러면 그바꾼 데이터가 reducer로 전달된다  \n//그러면 기존state 말고 다음state가 만들어진다\n// const changeNickname={\n//     type:'CHANGE_NICKNAME',\n//     data:'dong'\n// }\n// //action creator 동적으로 데이터받는다 \n// const changeNicknames=(data)=>{\n//     return{\n//         type:'CHANGE_NICKNAME',\n//     }\n// }\n//reducer는 이전상태와 액션을 이용해서 다음상태를 만든다 reload할때 reducer가 실행된다\n\nconst rootReducer = combineReducers({\n  //ssr을 위해 index부분 들어감\n  index: (state = {}, action) => {\n    switch (action.type) {\n      case HYDRATE:\n        return _objectSpread(_objectSpread({}, state), action.payload);\n\n      default:\n        return state;\n    }\n  },\n  user,\n  post\n});\nexport default rootReducer;","map":{"version":3,"sources":["/Users/dong/nodebird/prepare/front/reducers/index.js"],"names":["HYDRATE","combineReducers","user","post","rootReducer","index","state","action","type","payload"],"mappings":";;;;;;AAAA,SAAQA,OAAR,QAAsB,oBAAtB;AACA,SAASC,eAAT,QAAgC,OAAhC;AAEA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,IAAP,MAAiB,QAAjB,C,CAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;AACA,MAAMC,WAAW,GAACH,eAAe,CAAC;AAE9B;AACAI,EAAAA,KAAK,EAAC,CAACC,KAAK,GAAC,EAAP,EAAUC,MAAV,KAAmB;AACrB,YAAOA,MAAM,CAACC,IAAd;AACI,WAAKR,OAAL;AACI,+CAAWM,KAAX,GAAoBC,MAAM,CAACE,OAA3B;;AACJ;AACI,eAAOH,KAAP;AAJR;AAOH,GAX6B;AAY9BJ,EAAAA,IAZ8B;AAa9BC,EAAAA;AAb8B,CAAD,CAAjC;AAiBA,eAAeC,WAAf","sourcesContent":["import {HYDRATE} from 'next-redux-wrapper'\nimport { combineReducers } from 'redux'\n\nimport user from './user'\nimport post from './post'\n\n\n\n//action\n//state를 바꾸고싶을때 항상 action을 만들어서 store에서 action을이용해 dispatch를 한다 그러면 그바꾼 데이터가 reducer로 전달된다  \n//그러면 기존state 말고 다음state가 만들어진다\n// const changeNickname={\n//     type:'CHANGE_NICKNAME',\n//     data:'dong'\n// }\n// //action creator 동적으로 데이터받는다 \n// const changeNicknames=(data)=>{\n//     return{\n//         type:'CHANGE_NICKNAME',\n//     }\n// }\n\n\n//reducer는 이전상태와 액션을 이용해서 다음상태를 만든다 reload할때 reducer가 실행된다\nconst rootReducer=combineReducers({\n\n    //ssr을 위해 index부분 들어감\n    index:(state={},action)=>{\n        switch(action.type){\n            case HYDRATE:\n                return {...state,...action.payload}      \n            default:\n                return state\n        }\n\n    },\n    user,\n    post\n\n    \n})\nexport default rootReducer"]},"metadata":{},"sourceType":"module"}